@using System.Text.RegularExpressions

<div class="col-sm-12 col-md-4 p-3 text-center">
    <div class="game-name py-2">
        <a href="@detailsGameUrl">@Game.Name</a>
    </div>
    <hr class="hrfix" />
    <div class="cart-image py-2">
        <a href="@detailsGameUrl">
            @if(IsBase64(Game.Image))
            {
                <img src="data:image/jpeg;base64,@Game.Image" class="game-image" />
            }
            else
            {
                <img src="@Game.Image" alt="@Game.Name" class="game-image" />
            }
        </a>
    </div>
    <hr class="hrfix" />
    <div class="game-card-footer">
        <div class="btn-group my-3 text-center" role="group">
            <a href="@editGameUrl" class="btn btn-outline-info"><i class="fa-regular fa-pen-to-square" style="margin-right: 6px;"></i>Edit</a>
            <button type="button" class="btn btn-danger" @onclick="(()=>OnDeleteGame.InvokeAsync(Game))">
                <i class="fa-solid fa-trash-can" style="margin-right: 6px;"></i>Delete
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter] public GameModel Game { get; set; }
    [Parameter] public EventCallback<GameModel> OnDeleteGame { get; set; }

    string detailsGameUrl = string.Empty;
    string editGameUrl = string.Empty;
    protected override void OnInitialized()
    {
        detailsGameUrl = $"games/{Game.Id}/{Uri.EscapeDataString(Game.Name)}";
        editGameUrl = $"games/edit/{Game.Id}/{Uri.EscapeDataString(Game.Name)}";
    }
    bool IsBase64(string? value)
    {
        if (value != null)
        {
            value = value.Trim();
            return ((value.Length % 4 == 0) && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None));
        }
        else
        {
            return false;
        }
    }
}
