@using System.Text.RegularExpressions
@using Tewr.Blazor.FileReader
@inject IFileReaderService _fileReader

<div class="input-group my-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroupFile">@Label</span>
    </div>
    <div class="custom-file">
        <input type="file" class="custom-file-input mt-1 ms-1" id="inputGroupFileField"
               aria-describedby="inputGroupFile" @ref="inputElement"
               @onchange="OnImageSelectedHandler" accept=".jpg, .jpeg, .png" />
    </div>
</div>
<div>
    @if (imageBase64 != null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="data:image/jpeg;base64,@imageBase64" class="img-thumbnail" width="200" >
            </div>
        </div>
    }
    @if(ImageUrl != null)
    {
        if (IsBase64(ImageUrl))
        {
            <div>
                <div class="my-3 mr-3">
                    <img src="data:image/jpeg;base64,@ImageUrl" class="img-thumbnail" width="200" >
                </div>
            </div>
        }
        else
        {
            <div>
                <div class="my-3 mr-3">
                    <img src="@ImageUrl" class="img-thumbnail" width="200" >
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Image";
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public EventCallback<string> OnImageSelected { get; set; }
    ElementReference inputElement;
    string? imageBase64;
    string fileName = "Choose file";

    async Task OnImageSelectedHandler()
    {
        foreach(var item in await _fileReader.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using(MemoryStream ms = await item.CreateMemoryStreamAsync(4 * 1024))
            {
                IFileInfo fileInfo = await item.ReadFileInfoAsync();
                fileName = fileInfo.Name;
                var byteImage = new byte[ms.Length];
                ms.Read(byteImage, 0, (int)ms.Length);
                imageBase64 = Convert.ToBase64String(byteImage);
                await OnImageSelected.InvokeAsync(imageBase64);
                ImageUrl = null;
                StateHasChanged();
            }
        }
    }
    bool IsBase64(string? value)
    {
        if (value != null)
        {
            value = value.Trim();
            return ((value.Length % 4 == 0) && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None));
        }
        else
        {
            return false;
        }
    }
}
